{"version":3,"sources":["playerStats.js"],"names":["player","data","item","stats","this","componentId","selectOptions","selectList","componentDiv","querySelectorAll","component","findStatHolders","selectedAttr","forEach","i","innerHTML","name","position","src","playerImage","alt","teamImage","teamName","checkPosition","pos","initPlayerStats","playerId","_this","document","getElementById","instance","$","getJSON","done","firstPlayerId","players","id","first","last","info","currentTeam","stat","toLowerCase","value","goalsPerMatch","parseInt","goals","appearances","passesPerMinute","fwd_pass","backward_pass","mins_played","addEventListener","e","getNewPlayer","target","fail","jqxhr","textStatus","error","err","console","log","components","playerStats"],"mappings":"YAuEQ,SAAMA,cAAkBC,EAAUD,GAGlCE,GAAKC,GAAcC,KAAAC,GAOnBC,EAAAA,EAAmCJ,aAI/BK,EAAaC,EAAAA,KAAaC,EAvEpCC,GAAUC,gBAAkBH,EAAaC,iBAAiB,sBAC1DC,EAAUE,cAAgB,cAAe,QAAS,cAAe,gBAAiB,mBAGlFF,EAAUC,gBAAgBE,QAAQ,SAACX,EAAMY,GACvCZ,EAAKO,iBAAiB,cAAc,GAAGM,UAAYf,EAAOU,EAAUE,aAAaE,KAAO,IAI1FN,EAAaC,iBAAiB,MAAM,GAAGM,UAAYf,EAAOgB,KAC1DR,EAAaC,iBAAiB,MAAM,GAAGM,UAAYf,EAAOiB,SAC1DT,EAAaC,iBAAiB,OAAO,GAAGS,IAAMlB,EAAOmB,YACrDX,EAAaC,iBAAiB,OAAO,GAAGW,IAAMpB,EAAOgB,KACrDR,EAAaC,iBAAiB,OAAO,GAAGS,IAAMlB,EAAOqB,UACrDb,EAAaC,iBAAiB,OAAO,GAAGW,IAAMpB,EAAOsB,SAGvD,QAASC,eAAcC,GACrB,OAAQA,GACN,IAAK,IACH,MAAO,SACT,KAAK,IACH,MAAO,UACT,KAAK,IACH,MAAO,WAIb,QAASC,iBAAgBC,EAAUrB,GAAa,GAAAsB,GAAAvB,IAC9CA,MAAKC,IACHG,aAAcoB,SAASC,eAAexB,GAExC,IAAMyB,GAAW1B,KAAKC,GAChBG,EAAesB,EAAStB,YAE9BuB,GAAEC,QAAQ,2BACPC,KAAK,SAAChC,GAEL,GAAIK,GAAgB,GAChB4B,EAAgB,CACpBJ,GAAS7B,QAGTA,EAAKkC,QAAQtB,QAAQ,SAACX,GAEC,IAAlBgC,IAAqBA,EAAgBhC,EAAKF,OAAOoC,IAGpDN,EAAS7B,KAAKC,EAAKF,OAAOoC,KACxBpB,KAAMd,EAAKF,OAAOgB,KAAKqB,MAAQ,IAAMnC,EAAKF,OAAOgB,KAAKsB,KACtDrB,SAAUU,EAAKJ,cAAcrB,EAAKF,OAAOuC,KAAKtB,UAC9CE,YAAa,oBAAsBjB,EAAKF,OAAOoC,GAAK,OACpDf,UAAW,kBAAoBnB,EAAKF,OAAOwC,YAAYJ,GAAK,OAC5Dd,SAAUpB,EAAKF,OAAOwC,YAAYxB,KAIpC,IAAMhB,GAAS8B,EAAS7B,KAAKC,EAAKF,OAAOoC,GAGzClC,GAAKC,MAAMU,QAAQ,SAAC4B,GAClBzC,EAAQyC,EAAKzB,KAAM0B,eAAiBD,EAAKE,QAE3C3C,EAAO4C,cAAgBC,SAAS7C,EAAO8C,MAAM9C,EAAO+C,YAAY,KAAK,IACrE/C,EAAOgD,gBAAkBH,UAAU7C,EAAOiD,SAAWjD,EAAOkD,eAAelD,EAAOmD,YAAY,KAAK,IAGnG7C,GAAAA,kBAAmCJ,EAAKF,OAAOoC,GAA/C,KAAsDlC,EAAKF,OAAOgB,KAAKqB,MAAvE,IAAgFnC,EAAKF,OAAOgB,KAAKsB,KAAjG,aAIF,IAAM/B,GAAaC,EAAaC,iBAAiB,yBAAyB,EAC1EF,GAAW6C,iBAAiB,SAAU,SAACC,GACrC1B,EAAK2B,aAAaD,EAAEE,OAAOZ,MAAOtC,KAEpCE,EAAWQ,UAAYT,EAGvBqB,EAAK2B,aAAapB,EAAe7B,KAElCmD,KAAK,SAACC,EAAOC,EAAYC,GACxB,GAAIC,GAAMF,EAAa,IAAMC,CAC7BE,SAAQC,IAAK,mBAAqBF,KAhGxC,GAAMG,aAcJrD,aAIAA,gBAAAA,gBAKAF,aAAAA,aA6BQF,cAAAA,eAgDVsB,UAASwB,iBAAiB,mBAAoB,WAC5CW,WAAWC,YAAYvC,gBAAgB,KAAM","file":"playerStats.js","sourcesContent":["const components = {\n  playerStats: {\n    initPlayerStats,\n    getNewPlayer,\n    checkPosition\n  }\n};\n\nfunction getNewPlayer(playerId, componentId) {\n  const component = this[componentId];\n  const componentDiv = component.componentDiv;\n  const player = component.data[playerId];\n\n  // get dom elems and set requested attrs\n  component.findStatHolders = componentDiv.querySelectorAll('section.playerStat');\n  component.selectedAttr = ['appearances', 'goals', 'goal_assist', 'goalsPerMatch', 'passesPerMinute'];\n\n  // populate attrs\n  component.findStatHolders.forEach((item, i)=> {\n    item.querySelectorAll('.statValue')[0].innerHTML = player[component.selectedAttr[i]] || 0;\n  });\n\n  // populate other dom elems as required\n  componentDiv.querySelectorAll('h1')[0].innerHTML = player.name;\n  componentDiv.querySelectorAll('h2')[0].innerHTML = player.position;\n  componentDiv.querySelectorAll('img')[0].src = player.playerImage;\n  componentDiv.querySelectorAll('img')[0].alt = player.name;\n  componentDiv.querySelectorAll('img')[1].src = player.teamImage;\n  componentDiv.querySelectorAll('img')[1].alt = player.teamName;\n}\n\nfunction checkPosition(pos) {\n  switch (pos) {\n    case 'D':\n      return 'Defence';\n    case 'M':\n      return 'Midfield';\n    case 'F':\n      return 'Forward';\n  }\n}\n\nfunction initPlayerStats(playerId, componentId) {\n  this[componentId] = {\n    componentDiv: document.getElementById(componentId)\n  };\n  const instance = this[componentId];\n  const componentDiv = instance.componentDiv;\n\n  $.getJSON('/data/player-stats.json')\n    .done((data) => {\n      // Define some defaults\n      var selectOptions = '';\n      let firstPlayerId = 0;\n      instance.data = {};\n\n      // Log relevant info for each player\n      data.players.forEach((item) => {\n        // Set first loaded player id\n        if(firstPlayerId === 0) firstPlayerId = item.player.id;\n\n        // Get attributes\n        instance.data[item.player.id] = {\n          name: item.player.name.first + ' ' + item.player.name.last,\n          position: this.checkPosition(item.player.info.position),\n          playerImage: '/images/players/p' + item.player.id + '.png',\n          teamImage: '/images/teams/t' + item.player.currentTeam.id + '.png',\n          teamName: item.player.currentTeam.name\n        };\n\n        // define object as player for easy reading\n        const player = instance.data[item.player.id];\n\n        // get player stats and reformat (to avoid missing and misaligned array values)\n        item.stats.forEach((stat) => {\n          player[(stat.name).toLowerCase()] = stat.value;\n        });\n        player.goalsPerMatch = parseInt(player.goals/player.appearances*100)/100;\n        player.passesPerMinute = parseInt((player.fwd_pass + player.backward_pass)/player.mins_played*100)/100;\n\n        // write select options for dropdown\n        selectOptions += `<option value=\"${item.player.id}\">${item.player.name.first} ${item.player.name.last}</option>`;\n      });\n\n      // Set up select list and event listener\n      const selectList = componentDiv.querySelectorAll('select.playerSelector')[0];\n      selectList.addEventListener('change', (e) => {\n        this.getNewPlayer(e.target.value, componentId);\n      });\n      selectList.innerHTML = selectOptions;\n\n      // Populate first loaded player\n      this.getNewPlayer(firstPlayerId, componentId);\n    })\n    .fail((jqxhr, textStatus, error) => {\n      var err = textStatus + ',' + error;\n      console.log( 'Request Failed: ' + err );\n    });\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  components.playerStats.initPlayerStats(4916, 'stats1');\n});\n"]}